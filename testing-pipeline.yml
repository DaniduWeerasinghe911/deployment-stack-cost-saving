trigger:
  branches:
    include:
      - main
      - feature/*
      - release/*

variables:
  - name: location
    value: 'australiaeast'
  - name: environmentType
    value: 'nonprod'

pool:
  vmImage: 'windows-latest'

stages:
- stage: SecurityAndQualityChecks
  jobs:
  - job: AISecurityScanning
    steps:
      # Install and configure ARM-TTK
    - task: PowerShell@2
        displayName: 'Install ARM-TTK'
        inputs:
          targetType: 'inline'
          script: |
            Install-Module -Name ARM-TTK -Force -Scope CurrentUser
            Import-Module ARM-TTK

    - task: MicrosoftSecurityDevOps@1
        displayName: 'Microsoft Security DevOps'
        inputs:
          categories: 'IaC'
          outputFormat: 'sarif'
          tools: 'binskim,templateanalyzer'  # Removed arm-ttk as we'll handle it separately

      # Add dedicated ARM-TTK testing step
    - task: PowerShell@2
        displayName: 'Run ARM-TTK Tests'
        inputs:
          targetType: 'inline'
          script: |
            $resultsDir = "$(Build.ArtifactStagingDirectory)/security-results"
            New-Item -ItemType Directory -Force -Path $resultsDir
            
            # Convert Bicep to ARM templates for testing
            Get-ChildItem -Path "$(System.DefaultWorkingDirectory)" -Filter "*.bicep" -Recurse | ForEach-Object {
                Write-Host "Converting $($_.Name) to ARM template"
                $armTemplatePath = $_.FullName -replace '\.bicep$', '.json'
                az bicep build --file $_.FullName --outfile $armTemplatePath
                
                # Run ARM-TTK tests
                $testResults = Test-AzTemplate -TemplatePath $armTemplatePath
                
                # Export results
                $testResults | ConvertTo-Json -Depth 10 | Out-File "$resultsDir/arm-ttk-$($_.BaseName).json"
            }

    - task: PowerShell@2
      displayName: 'Custom Security Analysis'
      inputs:
        targetType: 'inline'
        script: |
          # Create results directory
          $resultsDir = "$(Build.ArtifactStagingDirectory)/security-results"
          New-Item -ItemType Directory -Force -Path $resultsDir

          # Analyze Bicep files
          $bicepResults = @()
          Get-ChildItem -Path "$(System.DefaultWorkingDirectory)" -Filter "*.bicep" -Recurse | ForEach-Object {
              Write-Host "Analyzing $($_.Name)"
              
              # Convert to ARM for analysis
              $armOutput = az bicep decompile --file $_.FullName 2>&1
              
              # Run security checks
              $validationResult = az deployment sub validate `
                  --location $(location) `
                  --template-file $_.FullName `
                  --parameters location=$(location) 2>&1
              
              $analysis = @{
                  FileName = $_.Name
                  Path = $_.FullName
                  LastModified = $_.LastWriteTime
                  ValidationStatus = if ($LASTEXITCODE -eq 0) { "Passed" } else { "Failed" }
                  Issues = $validationResult
              }
              
              $bicepResults += New-Object PSObject -Property $analysis
          }

          # Export results
          $bicepResults | ConvertTo-Json -Depth 10 | Out-File "$resultsDir/security-analysis.json"

          # Generate HTML report
          $htmlReport = @"
          <!DOCTYPE html>
          <html>
          <head>
              <title>Security Analysis Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  .file-result { margin: 10px 0; padding: 10px; border: 1px solid #ddd; }
                  .passed { background-color: #e6ffe6; }
                  .failed { background-color: #ffe6e6; }
              </style>
          </head>
          <body>
              <h1>Security Analysis Report</h1>
              <div id="results">
                  $(foreach ($result in $bicepResults) {
                      "<div class='file-result $($result.ValidationStatus.ToLower())'>"
                      "<h3>$($result.FileName)</h3>"
                      "<p>Status: $($result.ValidationStatus)</p>"
                      "<pre>$($result.Issues)</pre>"
                      "</div>"
                  })
              </div>
          </body>
          </html>
          "@
          
          $htmlReport | Out-File "$resultsDir/security-report.html"

          # Create markdown summary
          $mdSummary = @"
          # Security Analysis Summary
          Generated: $(Get-Date)
          
          ## Results Overview
          - Total Files Analyzed: $($bicepResults.Count)
          - Passed: $($bicepResults.Where({$_.ValidationStatus -eq 'Passed'}).Count)
          - Failed: $($bicepResults.Where({$_.ValidationStatus -eq 'Failed'}).Count)
          
          ## Details
          $(foreach ($result in $bicepResults) {
              "### $($result.FileName)`n"
              "- Status: $($result.ValidationStatus)`n"
              "- Path: $($result.Path)`n"
              "- Last Modified: $($result.LastModified)`n"
              if ($result.ValidationStatus -eq 'Failed') {
                  "- Issues:`n````n$($result.Issues)`n```"
              }
          })
          "@
          
          $mdSummary | Out-File "$resultsDir/security-summary.md"
          Write-Host "##vso[task.uploadsummary]$resultsDir/security-summary.md"

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Security Results'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/security-results'
        ArtifactName: 'SecurityAnalysis'
        publishLocation: 'Container'


- stage: BicepValidation
  dependsOn: SecurityAndQualityChecks
  jobs:
  - job: ValidateBicep
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: 'azure-mvp-subscription'
        ScriptType: 'InlineScript'
        Inline: |
          # Validate Bicep files
          Get-ChildItem -Path "$(System.DefaultWorkingDirectory)" -Filter "*.bicep" -Recurse | ForEach-Object {
            Write-Host "Validating $($_.FullName)"
            az bicep build --file $_.FullName
          }
        azurePowerShellVersion: 'LatestVersion'

- stage: AITestGeneration
  dependsOn: BicepValidation
  jobs:
  - job: GenerateAndRunTests
    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: 'azure-mvp-subscription'
        ScriptType: 'InlineScript'
        Inline: |
          # Generate test cases using Azure's What-If analysis
          az deployment sub what-if `
            --location $(location) `
            --template-file main.bicep `
            --parameters main.bicepparam
        azurePowerShellVersion: 'LatestVersion'